generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int             @id @default(autoincrement())
  username           String          @unique @db.VarChar(50)
  email              String          @unique @db.VarChar(100)
  passwordHash       String          @map("password_hash") @db.VarChar(255)
  firstName          String          @map("first_name") @db.VarChar(50)
  lastName           String          @map("last_name") @db.VarChar(50)
  role               user_role?      @default(user)
  isActive           Boolean?        @default(true) @map("is_active")
  createdAt          DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  activityLogs       ActivityLog[]
  commentMedia       CommentMedia[]
  comments           Comment[]
  addedMembers       ProjectMember[] @relation("MemberAdder")
  projectMemberships ProjectMember[]
  createdProjects    Project[]       @relation("ProjectCreator")
  taskMedia          TaskMedia[]
  assignedTasks      Task[]          @relation("TaskAssignee")
  createdTasks       Task[]          @relation("TaskCreator")

  @@index([email], map: "idx_users_email")
  @@index([role], map: "idx_users_role")
  @@index([username], map: "idx_users_username")
  @@map("users")
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(100)
  description String?
  createdById Int             @map("created_by")
  isActive    Boolean?        @default(true) @map("is_active")
  createdAt   DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  members     ProjectMember[]
  createdBy   User            @relation("ProjectCreator", fields: [createdById], references: [id], onUpdate: NoAction)
  tasks       Task[]

  @@index([isActive], map: "idx_projects_active")
  @@index([createdById], map: "idx_projects_created_by")
  @@map("projects")
}

model ProjectMember {
  id        Int       @id @default(autoincrement())
  projectId Int       @map("project_id")
  userId    Int       @map("user_id")
  addedById Int       @map("added_by")
  addedAt   DateTime? @default(now()) @map("added_at") @db.Timestamptz(6)
  addedBy   User      @relation("MemberAdder", fields: [addedById], references: [id], onUpdate: NoAction)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([projectId, userId])
  @@index([projectId], map: "idx_project_members_project")
  @@index([userId], map: "idx_project_members_user")
  @@map("project_members")
}

model Task {
  id           Int          @id @default(autoincrement())
  title        String       @db.VarChar(200)
  description  String?
  projectId    Int          @map("project_id")
  assignedToId Int?         @map("assigned_to")
  createdById  Int          @map("created_by")
  status       task_status? @default(to_do)
  priority     Int?         @default(1)
  dueDate      DateTime?    @map("due_date") @db.Timestamptz(6)
  completedAt  DateTime?    @map("completed_at") @db.Timestamptz(6)
  createdAt    DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  comments     Comment[]
  media        TaskMedia[]
  assignedTo   User?        @relation("TaskAssignee", fields: [assignedToId], references: [id], onUpdate: NoAction)
  createdBy    User         @relation("TaskCreator", fields: [createdById], references: [id], onUpdate: NoAction)
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([assignedToId], map: "idx_tasks_assigned_to")
  @@index([createdById], map: "idx_tasks_created_by")
  @@index([dueDate], map: "idx_tasks_due_date")
  @@index([projectId], map: "idx_tasks_project")
  @@index([status], map: "idx_tasks_status")
  @@map("tasks")
}

model Comment {
  id              Int            @id @default(autoincrement())
  content         String
  taskId          Int            @map("task_id")
  userId          Int            @map("user_id")
  parentCommentId Int?           @map("parent_comment_id")
  isEdited        Boolean?       @default(false) @map("is_edited")
  createdAt       DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  media           CommentMedia[]
  parentComment   Comment?       @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies         Comment[]      @relation("CommentReplies")
  task            Task           @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            User           @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([parentCommentId], map: "idx_comments_parent")
  @@index([taskId], map: "idx_comments_task")
  @@index([userId], map: "idx_comments_user")
  @@map("comments")
}

model TaskMedia {
  id           Int        @id @default(autoincrement())
  taskId       Int        @map("task_id")
  uploadedById Int        @map("uploaded_by")
  fileName     String     @map("file_name") @db.VarChar(255)
  filePath     String     @map("file_path") @db.VarChar(500)
  fileSize     Int        @map("file_size")
  mediaType    media_type @map("media_type")
  mimeType     String     @map("mime_type") @db.VarChar(100)
  createdAt    DateTime?  @default(now()) @map("created_at") @db.Timestamptz(6)
  task         Task       @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  uploadedBy   User       @relation(fields: [uploadedById], references: [id], onUpdate: NoAction)

  @@index([taskId], map: "idx_task_media_task")
  @@map("task_media")
}

model CommentMedia {
  id           Int        @id @default(autoincrement())
  commentId    Int        @map("comment_id")
  uploadedById Int        @map("uploaded_by")
  fileName     String     @map("file_name") @db.VarChar(255)
  filePath     String     @map("file_path") @db.VarChar(500)
  fileSize     Int        @map("file_size")
  mediaType    media_type @map("media_type")
  mimeType     String     @map("mime_type") @db.VarChar(100)
  createdAt    DateTime?  @default(now()) @map("created_at") @db.Timestamptz(6)
  comment      Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  uploadedBy   User       @relation(fields: [uploadedById], references: [id], onUpdate: NoAction)

  @@index([commentId], map: "idx_comment_media_comment")
  @@map("comment_media")
}

model ActivityLog {
  id           Int             @id @default(autoincrement())
  userId       Int?            @map("user_id")
  action       activity_action
  resourceType String          @map("resource_type") @db.VarChar(50)
  resourceId   Int             @map("resource_id")
  oldValues    Json?           @map("old_values")
  newValues    Json?           @map("new_values")
  description  String?
  ipAddress    String?         @map("ip_address") @db.Inet
  userAgent    String?         @map("user_agent")
  createdAt    DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  user         User?           @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([action], map: "idx_activity_logs_action")
  @@index([createdAt], map: "idx_activity_logs_created_at")
  @@index([resourceType, resourceId], map: "idx_activity_logs_resource")
  @@index([userId], map: "idx_activity_logs_user")
  @@map("activity_logs")
}

enum activity_action {
  user_created
  user_updated
  user_deleted
  project_created
  project_updated
  project_deleted
  project_member_added
  project_member_removed
  task_created
  task_updated
  task_deleted
  task_assigned
  task_status_changed
  comment_created
  comment_updated
  comment_deleted
}

enum media_type {
  image
  video
  document
}

enum task_status {
  to_do       @map("to-do")
  in_progress @map("in-progress")
  done
}

enum user_role {
  admin
  user
}
